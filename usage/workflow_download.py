from jmcomic import *
from jmcomic.cl import JmcomicUI

# 下方填入你要下载的本子的id，一行一个，每行的首尾可以有空白字符
jm_albums = '''
JM624049
624049
JM622608
622608
JM199351
199351
JM463712
463712
JM463454
463454
JM461624
461624
JM143891
143891
JM459555
459555
JM459051
459051
JM146926
146926
JM146932
146932
JM150356
150356
JM206521
206521
JM207118
207118
JM207119
207119
JM245614
245614
JM271318
271318
JM435657
435657
JM447827
447827
JM587710
587710
JM383481
383481
JM457749
457749
JM457852
457852
JM456136
456136
JM453956
453956
JM39428
39428
JM60844
60844
JM60848
60848
JM60859
60859
JM143979
143979
JM149379
149379
JM149654
149654
JM208769
208769
JM185554
185554
JM191756
191756
JM225369
225369
JM225886
225886
JM227267
227267
JM254031
254031
JM254461
254461
JM256182
256182
JM290773
290773
JM343168
343168
JM405112
405112
JM414084
414084
JM567600
567600
JM448010
448010
JM447896
447896
JM447238
447238
JM451580
451580
JM452683
452683
JM447238
447238
JM294743
294743
JM565355
565355
JM567940
567940
JM569223
569223
JM537171
537171
JM481035
481035
JM415526
415526
JM354573
354573
JM254753
254753
JM189818
189818
JM422141
422141
JM448699
448699
JM82635
82635
JM99790
99790
JM139675
139675
JM136942
136942
JM222322
222322
JM449355
449355
JM561118
561118
JM446687
446687
JM446980
446980
JM446040
446040
JM540694
540694
JM541317
541317
JM443870
443870
JM435767
435767
JM507757
507757
JM228450
228450
JM242355
242355
JM305841
305841
JM317924
317924
JM319702
319702
JM351868
351868
JM433218
433218
JM437125
437125
JM438935
438935
JM435430
435430
JM404778
404778
JM435399
435399
JM435209
435209
JM467997
467997
JM468697
468697
JM512097
512097
JM434573
434573
JM514348
514348
JM405624
405624
JM425092
425092
JM404357
404357
JM388875
388875
JM381979
381979
JM380438
380438
JM184484
184484
JM366271
366271
JM375343
375343
JM543296
543296
JM8830
8830
JM26303
26303
JM26304
26304
JM26306
26306
JM34354
34354
JM35238
35238
JM39963
39963
JM40099
40099
JM40594
40594
JM40595
40595
JM48398
48398
JM147046
147046
JM149908
149908
JM221420
221420
JM320234
320234
JM347433
347433
JM434538
434538
JM251149
251149
JM433222
433222
JM432590
432590
JM219355
219355
JM164787
164787
JM178008
178008
JM233352
233352
JM258075
258075
JM258312
258312
JM288417
288417
JM308936
308936
JM365035
365035
JM430028
430028
JM430385
430385
JM472248
472248
JM598974
598974
JM600570
600570
JM433835
433835
JM429939
429939
JM496182
496182
JM428629
428629
JM429111
429111
JM426515
426515
JM306435
306435
JM325296
325296
JM354348
354348
JM415522
415522
JM440096
440096
JM425087
425087
JM227352
227352
JM418785
418785
JM305181
305181
JM240163
240163
JM423392
423392
JM423200
423200
JM269777
269777
JM423178
423178
JM454104
454104
JM572032
572032
JM422427
422427
JM422844
422844
JM422836
422836
JM550179
550179
JM420336
420336
JM324057
324057
JM419644
419644
JM226172
226172
JM417936
417936
JM420129
420129
JM420130
420130
JM462478
462478
JM423561
423561
JM423570
423570
JM463237
463237
JM464476
464476
JM464478
464478
JM464482
464482
JM464483
464483
JM508546
508546
JM420117
420117
JM419259
419259
JM588453
588453
JM252762
252762
JM194501
194501
JM412079
412079
JM554027
554027
JM152183
152183
JM154319
154319
JM44721
44721
JM175566
175566
JM182483
182483
JM184976
184976
JM188418
188418
JM412286
412286
JM463215
463215
JM534742
534742
JM276921
276921
JM368241
368241
JM411779
411779
JM487330
487330
JM548615
548615
JM548974
548974
JM549001
549001
JM412302
412302
JM241717
241717
JM302396
302396
JM430983
430983
JM408056
408056
JM526416
526416
JM546290
546290
JM303033
303033
JM520294
520294
JM375336
375336
JM325714
325714
JM546291
546291
JM577500
577500
JM404650
404650
JM143250
143250
JM66951
66951
JM116172
116172
JM120773
120773
JM143250
143250
JM144450
144450
JM148023
148023
JM151830
151830
JM180256
180256
JM401673
401673
JM401105
401105
JM582094
582094
JM401395
401395
JM402077
402077
JM402080
402080
JM557934
557934
JM401470
401470
JM399712
399712
JM399769
399769
JM409663
409663
JM397138
397138
JM395700
395700
JM341007
341007
JM466384
466384
JM394889
394889
JM554447
554447
JM137764
137764
JM180502
180502
JM261646
261646
JM271323
271323
JM272646
272646
JM391614
391614
JM391615
391615
JM388387
388387
JM388961
388961
JM487811
487811
JM515234
515234
JM543524
543524
JM387863
387863
JM425926
425926
JM387632
387632
JM213448
213448
JM385731
385731
JM62674
62674
JM308616
308616
JM394355
394355
JM321040
321040
JM360975
360975
JM367143
367143
JM389746
389746
JM394161
394161
JM407850
407850
JM357452
357452
JM378812
378812
JM394035
394035
JM355605
355605
JM399795
399795
JM335193
335193
JM393843
393843
JM249755
249755
JM345263
345263
JM392943
392943
JM234096
234096
JM273064
273064
JM339126
339126
JM386682
386682
JM394986
394986
JM403865
403865
JM384715
384715
JM366528
366528
JM298114
298114
JM383459
383459
JM382789
382789
JM323664
323664
JM358582
358582
JM373958
373958
JM382559
382559
JM525512
525512
JM381986
381986
JM381590
381590
JM213865
213865
JM381820
381820
JM412282
412282
JM377527
377527
JM372796
372796
JM372793
372793
JM384774
384774
JM385779
385779
JM371304
371304
JM378929
378929
JM385473
385473
JM423200
423200
JM217586
217586
JM373967
373967
JM377713
377713
JM377685
377685
JM412235
412235
JM548688
548688
JM370714
370714
JM193288
193288
JM205612
205612
JM365159
365159
JM366621
366621
JM366516
366516
JM105667
105667
JM366772
366772
JM368024
368024
JM122520
122520
JM558272
558272
JM367113
367113
JM367114
367114
JM278689
278689
JM301697
301697
JM336482
336482
JM375128
375128
JM377412
377412
JM460110
460110
JM460116
460116
JM459031
459031
JM14409
14409
JM22061
22061
JM34355
34355
JM34528
34528
JM104338
104338
JM104340
104340
JM105651
105651
JM125837
125837
JM165787
165787
JM250725
250725
JM270295
270295
JM137122
137122
JM249443
249443
JM331307
331307
JM368800
368800
JM360724
360724
JM114693
114693
JM344533
344533
JM354437
354437
JM356462
356462
JM358393
358393
JM360524
360524
JM365937
365937
JM365938
365938
JM187376
187376
JM360737
360737
JM355050
355050
JM241994
241994
JM360344
360344
JM466368
466368
JM355996
355996
JM460929
460929
JM26958
26958
JM40060
40060
JM202310
202310
JM341975
341975
JM355003
355003
JM360339
360339
JM213930
213930
JM353588
353588
JM315493
315493
JM349863
349863
JM442198
442198
JM348845
348845
JM452834
452834
JM349860
349860
JM180833
180833
JM180834
180834
JM347110
347110
JM615107
615107
JM33841
33841
JM347016
347016
JM61729
61729
JM516652
516652
JM562832
562832
JM346348
346348
JM231397
231397
JM249398
249398
JM136472
136472
JM150029
150029
JM226900
226900
JM118528
118528
JM106017
106017
JM2739
2739
JM344347
344347
JM41032
41032
JM137929
137929
JM137931
137931
JM334073
334073
JM342871
342871
JM343163
343163
JM343526
343526
JM343910
343910
JM344133
344133
JM344323
344323
JM332825
332825
JM332068
332068
JM330542
330542
JM330662
330662
JM250520
250520
JM26172
26172
JM34616
34616
JM66272
66272
JM72052
72052
JM509099
509099
JM330007
330007
JM324294
324294
JM308031
308031
JM331727
331727
JM280691
280691
JM320798
320798
JM319098
319098
JM318181
318181
JM318530
318530
JM140282
140282
JM197181
197181
JM385941
385941
JM386000
386000
JM567595
567595
JM622550
622550
JM316421
316421
JM83269
83269
JM122719
122719
JM139785
139785
JM220447
220447
JM316791
316791
JM21800
21800
JM35601
35601
JM45354
45354
JM13081
13081
JM4134
4134
JM6980
6980
JM9600
9600
JM10921
10921
JM11622
11622
JM12572
12572
JM14128
14128
JM14465
14465
JM17830
17830
JM39679
39679
JM39323
39323
JM315076
315076
JM104017
104017
JM198118
198118
JM315053
315053
JM95144
95144
JM1822
1822
JM1823
1823
JM1825
1825
JM1826
1826
JM1827
1827
JM1828
1828
JM104959
104959
JM104960
104960
JM104958
104958
JM104962
104962
JM104965
104965
JM229007
229007
JM418772
418772
JM501927
501927
JM246383
246383
JM310533
310533
JM273064
273064
JM309121
309121
JM483811
483811
JM125682
125682
JM144868
144868
JM154610
154610
JM309271
309271
JM475610
475610
JM513601
513601
JM243835
243835
JM145207
145207
JM9212
9212
JM6719
6719
JM931
931
JM777
777
JM885
885
JM308586
308586
JM272974
272974
JM221658
221658
JM297276
297276
JM307148
307148
JM303707
303707
JM524862
524862
JM303470
303470
JM391079
391079
JM363677
363677
JM101563
101563
JM181771
181771
JM114625
114625
JM38858
38858
JM38977
38977
JM302394
302394
JM457416
457416
JM456135
456135
JM302265
302265
JM271956
271956
JM256931
256931
JM117024
117024
JM137659
137659
JM198011
198011
JM303184
303184
JM303132
303132
JM302568
302568
JM322365
322365
JM469762
469762
JM464675
464675
JM408924
408924
JM480286
480286
JM320212
320212
JM211487
211487
JM208833
208833
JM105745
105745
JM216993
216993
JM296688
296688
JM295640
295640
JM295384
295384
JM408839
408839
JM530108
530108
JM532311
532311
JM618667
618667
JM295011
295011
JM257072
257072
JM292756
292756
JM294581
294581
JM294589
294589
JM224916
224916
JM290462
290462
JM290463
290463
JM54047
54047
JM288542
288542
JM288446
288446
JM213162
213162
JM219356
219356
JM450026
450026
JM361788
361788
JM195698
195698
JM287537
287537
JM286157
286157
JM287460
287460
JM604081
604081
JM589034
589034
JM540468
540468
JM427068
427068
JM505963
505963
JM375186
375186
JM473995
473995
JM340343
340343
JM359850
359850
JM305377
305377
JM326361
326361
JM479801
479801
JM276718
276718
JM347468
347468
JM433264
433264
JM438510
438510
JM495261
495261
JM466193
466193
JM565647
565647
JM559772
559772
JM554120
554120
JM525810
525810
JM523596
523596
JM429949
429949
JM437201
437201
JM285843
285843
JM2527
2527
JM282245
282245
JM125665
125665
JM225652
225652
JM281298
281298
JM280759
280759
JM280760
280760
JM41280
41280
JM280738
280738
JM278545
278545
JM278619
278619
JM80436
80436
JM141819
141819
JM146028
146028
JM263507
263507
JM277847
277847


































































'''

# 单独下载章节
jm_photos = '''



'''


def env(name, default, trim=('[]', '""', "''")):
    import os
    value = os.getenv(name, None)
    if value is None or value == '':
        return default

    for pair in trim:
        if value.startswith(pair[0]) and value.endswith(pair[1]):
            value = value[1:-1]

    return value


def get_id_set(env_name, given):
    aid_set = set()
    for text in [
        given,
        (env(env_name, '')).replace('-', '\n'),
    ]:
        aid_set.update(str_to_set(text))

    return aid_set


def main():
    album_id_set = get_id_set('JM_ALBUM_IDS', jm_albums)
    photo_id_set = get_id_set('JM_PHOTO_IDS', jm_photos)

    helper = JmcomicUI()
    helper.album_id_list = list(album_id_set)
    helper.photo_id_list = list(photo_id_set)

    option = get_option()
    helper.run(option)
    option.call_all_plugin('after_download')


def get_option():
    # 读取 option 配置文件
    option = create_option(os.path.abspath(os.path.join(__file__, '../../assets/option/option_workflow_download.yml')))

    # 支持工作流覆盖配置文件的配置
    cover_option_config(option)

    # 把请求错误的html下载到文件，方便GitHub Actions下载查看日志
    log_before_raise()

    return option


def cover_option_config(option: JmOption):
    dir_rule = env('DIR_RULE', None)
    if dir_rule is not None:
        the_old = option.dir_rule
        the_new = DirRule(dir_rule, base_dir=the_old.base_dir)
        option.dir_rule = the_new

    impl = env('CLIENT_IMPL', None)
    if impl is not None:
        option.client.impl = impl

    suffix = env('IMAGE_SUFFIX', None)
    if suffix is not None:
        option.download.image.suffix = fix_suffix(suffix)


def log_before_raise():
    jm_download_dir = env('JM_DOWNLOAD_DIR', workspace())
    mkdir_if_not_exists(jm_download_dir)

    def decide_filepath(e):
        resp = e.context.get(ExceptionTool.CONTEXT_KEY_RESP, None)

        if resp is None:
            suffix = str(time_stamp())
        else:
            suffix = resp.url

        name = '-'.join(
            fix_windir_name(it)
            for it in [
                e.description,
                current_thread().name,
                suffix
            ]
        )

        path = f'{jm_download_dir}/【出错了】{name}.log'
        return path

    def exception_listener(e: JmcomicException):
        """
        异常监听器，实现了在 GitHub Actions 下，把请求错误的信息下载到文件，方便调试和通知使用者
        """
        # 决定要写入的文件路径
        path = decide_filepath(e)

        # 准备内容
        content = [
            str(type(e)),
            e.msg,
        ]
        for k, v in e.context.items():
            content.append(f'{k}: {v}')

        # resp.text
        resp = e.context.get(ExceptionTool.CONTEXT_KEY_RESP, None)
        if resp:
            content.append(f'响应文本: {resp.text}')

        # 写文件
        write_text(path, '\n'.join(content))

    JmModuleConfig.register_exception_listener(JmcomicException, exception_listener)


if __name__ == '__main__':
    main()
