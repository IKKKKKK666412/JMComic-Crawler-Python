from jmcomic import *
from jmcomic.cl import JmcomicUI

# 下方填入你要下载的本子的id，一行一个，每行的首尾可以有空白字符
jm_albums = '''
JM190006
190006
JM189555
189555
JM189028
189028
JM188963
188963
JM189581
189581
JM188948
188948
JM188631
188631
JM188197
188197
JM186632
186632
JM188434
188434
JM186475
186475
JM185529
185529
JM185071
185071
JM185189
185189
JM182495
182495
JM182137
182137
JM181307
181307
JM180836
180836
JM180290
180290
JM180293
180293
JM180343
180343
JM180505
180505
JM180211
180211
JM180044
180044
JM179971
179971
JM179296
179296
JM179205
179205
JM179287
179287
JM179116
179116
JM179164
179164
JM178997
178997
JM179057
179057
JM178444
178444
JM178771
178771
JM178429
178429
JM178273
178273
JM144442
144442
JM178203
178203
JM178301
178301
JM178297
178297
JM178211
178211
JM178272
178272
JM178186
178186
JM177820
177820
JM177798
177798
JM177342
177342
JM170337
170337
JM173106
173106
JM170054
170054
JM169914
169914
JM168535
168535
JM168017
168017
JM166676
166676
JM165995
165995
JM166004
166004
JM164842
164842
JM163373
163373
JM159554
159554
JM157725
157725
JM156380
156380
JM152372
152372
JM152355
152355
JM152369
152369
JM152350
152350
JM152186
152186
JM152197
152197
JM152207
152207
JM152230
152230
JM152101
152101
JM151820
151820
JM151840
151840
JM151663
151663
JM151486
151486
JM151475
151475
JM151608
151608
JM151577
151577
JM150758
150758
JM151292
151292
JM151286
151286
JM149558
149558
JM151232
151232
JM151160
151160
JM151140
151140
JM151137
151137
JM150508
150508
JM150364
150364
JM150502
150502
JM150457
150457
JM150474
150474
JM150438
150438
JM150363
150363
JM150359
150359
JM150355
150355
JM150318
150318
JM150226
150226
JM149764
149764
JM149861
149861
JM149663
149663
JM149530
149530
JM149126
149126
JM149254
149254
JM148981
148981
JM149108
149108
JM148955
148955
JM148953
148953
JM148863
148863
JM148855
148855
JM148760
148760
JM148614
148614
JM148546
148546
JM129930
129930
JM147352
147352
JM147950
147950
JM147943
147943
JM147897
147897
JM147534
147534
JM147530
147530
JM147374
147374
JM147330
147330
JM147359
147359
JM147364
147364
JM147149
147149
JM147084
147084
JM147045
147045
JM146968
146968
JM146891
146891
JM146795
146795
JM146542
146542
JM146626
146626
JM146325
146325
JM146004
146004
JM146170
146170
JM145317
145317
JM145309
145309
JM145050
145050
JM144994
144994
JM144976
144976
JM144911
144911
JM144709
144709
JM144514
144514
JM144051
144051
JM143384
143384
JM143348
143348
JM142453
142453
JM142647
142647
JM142177
142177
JM142176
142176
JM142051
142051
JM141926
141926
JM141833
141833
JM141924
141924
JM141797
141797
JM141799
141799
JM141787
141787
JM141312
141312
JM140178
140178
JM140289
140289
JM140128
140128
JM77436
77436
JM77692
77692
JM85653
85653
JM93171
93171
JM96399
96399
JM97539
97539
JM100824
100824
JM104885
104885
JM113136
113136
JM122469
122469
JM122539
122539
JM122939
122939
JM122941
122941
JM123008
123008
JM123372
123372
JM124303
124303
JM127305
127305
JM129541
129541
JM129738
129738
JM129950
129950
JM130453
130453
JM131122
131122
JM132323
132323
JM135014
135014
JM136030
136030
JM135519
135519
JM136055
136055
JM136056
136056
JM136723
136723
JM137928
137928
JM138813
138813
JM138833
138833
JM138851
138851
JM138986
138986
JM139310
139310
JM140064
140064
JM140365
140365
JM54259
54259
JM24806
24806
JM21649
21649
JM15029
15029
JM14824
14824
JM8613
8613
JM7031
7031
JM6977
6977
JM6498
6498
JM4833
4833
JM3908
3908
JM3741
3741
JM1399
1399
JM1400
1400
JM472
472
JM305
305
JM139001
139001
JM139002
139002
JM522470
522470
JM534060
534060
JM584660
584660
JM460844
460844
JM195499
195499
JM623617
623617
JM622491
622491
JM626235
626235
JM518768
518768
JM209252
209252
JM495191
495191
JM466032
466032
JM564424
564424
JM561441
561441
JM561856
561856
JM561597
561597
JM556788
556788
JM517716
517716
JM571405
571405
JM568630
568630
JM575159
575159
JM581636
581636
JM590925
590925
JM605132
605132
JM605768
605768
JM605287
605287
JM612797
612797
JM514023
514023
JM501199
501199
JM504428
504428
JM448141
448141
JM479436
479436
JM494474
494474
JM450127
450127
JM463168
463168
JM222195
222195
JM459243
459243
JM459643
459643
JM448099
448099
JM413388
413388
JM413838
413838
JM398954
398954
JM387681
387681
JM387597
387597
JM386249
386249
JM386204
386204
JM378635
378635
JM377810
377810
JM363079
363079
JM34043
34043
JM370639
370639
JM361326
361326
JM279651
279651
JM152325
152325
JM119527
119527
JM335410
335410
JM335409
335409
JM335408
335408
JM260100
260100
JM330890
330890
JM331720
331720
JM308138
308138
JM285295
285295
JM321974
321974
JM302227
302227
JM298444
298444
JM301681
301681
JM293464
293464
JM293962
293962
JM290595
290595
JM290261
290261
JM281885
281885
JM285192
285192
JM274903
274903
JM3922
3922
JM256832
256832
JM254320
254320
JM254228
254228
JM254214
254214
JM253179
253179
JM248451
248451
JM247119
247119
JM239640
239640
JM228522
228522
JM226954
226954
JM226080
226080
JM225106
225106
JM221544
221544
JM217481
217481
JM218569
218569
JM209151
209151
JM208023
208023
JM196743
196743
JM192887
192887
JM192885
192885
JM185384
185384
JM181947
181947
JM181953
181953
JM180265
180265
JM179999
179999
JM178160
178160
JM178196
178196
JM177656
177656
JM167186
167186
JM140625
140625
JM157731
157731
JM152665
152665
JM148638
148638
JM148548
148548
JM146244
146244
JM142781
142781
JM85740
85740
JM140990
140990
JM121674
121674
JM112765
112765
JM90976
90976
JM77553
77553
JM80876
80876
JM81654
81654
JM1965
1965
JM29871
29871
JM31279
31279
JM31284
31284
JM38622
38622
JM74828
74828
JM77638
77638
JM83589
JM618095
618095
JM506968
506968
JM522397
522397
JM222871
222871
JM518053
518053
JM502883
502883
JM394976
394976
JM400331
400331









































































































































































































































































































































































































































































































































































































































































































































































































































































































'''

# 单独下载章节
jm_photos = '''



'''


def env(name, default, trim=('[]', '""', "''")):
    import os
    value = os.getenv(name, None)
    if value is None or value == '':
        return default

    for pair in trim:
        if value.startswith(pair[0]) and value.endswith(pair[1]):
            value = value[1:-1]

    return value


def get_id_set(env_name, given):
    aid_set = set()
    for text in [
        given,
        (env(env_name, '')).replace('-', '\n'),
    ]:
        aid_set.update(str_to_set(text))

    return aid_set


def main():
    album_id_set = get_id_set('JM_ALBUM_IDS', jm_albums)
    photo_id_set = get_id_set('JM_PHOTO_IDS', jm_photos)

    helper = JmcomicUI()
    helper.album_id_list = list(album_id_set)
    helper.photo_id_list = list(photo_id_set)

    option = get_option()
    helper.run(option)
    option.call_all_plugin('after_download')


def get_option():
    # 读取 option 配置文件
    option = create_option(os.path.abspath(os.path.join(__file__, '../../assets/option/option_workflow_download.yml')))

    # 支持工作流覆盖配置文件的配置
    cover_option_config(option)

    # 把请求错误的html下载到文件，方便GitHub Actions下载查看日志
    log_before_raise()

    return option


def cover_option_config(option: JmOption):
    dir_rule = env('DIR_RULE', None)
    if dir_rule is not None:
        the_old = option.dir_rule
        the_new = DirRule(dir_rule, base_dir=the_old.base_dir)
        option.dir_rule = the_new

    impl = env('CLIENT_IMPL', None)
    if impl is not None:
        option.client.impl = impl

    suffix = env('IMAGE_SUFFIX', None)
    if suffix is not None:
        option.download.image.suffix = fix_suffix(suffix)


def log_before_raise():
    jm_download_dir = env('JM_DOWNLOAD_DIR', workspace())
    mkdir_if_not_exists(jm_download_dir)

    def decide_filepath(e):
        resp = e.context.get(ExceptionTool.CONTEXT_KEY_RESP, None)

        if resp is None:
            suffix = str(time_stamp())
        else:
            suffix = resp.url

        name = '-'.join(
            fix_windir_name(it)
            for it in [
                e.description,
                current_thread().name,
                suffix
            ]
        )

        path = f'{jm_download_dir}/【出错了】{name}.log'
        return path

    def exception_listener(e: JmcomicException):
        """
        异常监听器，实现了在 GitHub Actions 下，把请求错误的信息下载到文件，方便调试和通知使用者
        """
        # 决定要写入的文件路径
        path = decide_filepath(e)

        # 准备内容
        content = [
            str(type(e)),
            e.msg,
        ]
        for k, v in e.context.items():
            content.append(f'{k}: {v}')

        # resp.text
        resp = e.context.get(ExceptionTool.CONTEXT_KEY_RESP, None)
        if resp:
            content.append(f'响应文本: {resp.text}')

        # 写文件
        write_text(path, '\n'.join(content))

    JmModuleConfig.register_exception_listener(JmcomicException, exception_listener)


if __name__ == '__main__':
    main()
