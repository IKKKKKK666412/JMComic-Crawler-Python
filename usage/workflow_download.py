from jmcomic import *
from jmcomic.cl import JmcomicUI

# 下方填入你要下载的本子的id，一行一个，每行的首尾可以有空白字符
jm_albums = '''
JM625243
625243
JM624397
624397
JM624394
624394
JM624047
624047
JM623452
623452
JM623413
623413
JM623199
623199
JM623107
623107
JM510745
510745
JM225813
225813
JM141139
141139
JM271913
271913
JM499230
499230
JM515064
515064
JM398668
398668
JM148717
148717
JM346831
346831
JM579404
579404
JM231913
231913
JM603108
603108
JM485723
485723
JM473107
473107
JM514449
514449
JM146168
146168
JM59801
59801
JM514448
514448
JM263663
263663
JM539406
539406
JM273432
273432
JM177697
177697
JM302226
302226
JM346821
346821
JM415791
415791
JM279371
279371
JM217691
217691
JM241601
241601
JM261254
261254
JM535260
535260
JM385781
385781
JM249842
249842
JM425206
425206
JM412499
412499
JM253007
253007
JM496740
496740
JM419040
419040
JM182044
182044
JM550674
550674
JM379810
379810
JM549617
549617
JM305256
305256
JM253939
253939
JM482037
482037
JM520304
520304
JM421456
421456
JM523397
523397
JM519123
519123
JM562494
562494
JM560962
560962
JM503677
503677
JM505745
505745
JM497242
497242
JM401154
401154
JM424818
424818
JM422834
422834
JM420083
420083
JM419622
419622
JM418777
418777
JM416675
416675
JM407834
407834
JM406790
406790
JM405621
405621
JM284784
284784
JM371044
371044
JM418217
418217
JM509472
509472
JM405537
405537
JM402865
402865
JM404782
404782
JM404475
404475
JM404234
404234
JM404106
404106
JM401899
401899
JM388549
388549
JM545949
545949
JM401623
401623
JM399711
399711
JM398940
398940
JM397999
397999
JM396103
396103
JM395792
395792
JM392608
392608
JM391553
391553
JM391866
391866
JM387810
387810
JM384346
384346
JM148619
148619
JM380267
380267
JM375380
375380
JM371568
371568
JM369409
369409
JM368813
368813
JM360343
360343
JM351653
351653
JM366356
366356
JM349242
349242
JM193943
193943
JM244068
244068
JM345588
345588
JM382070
382070
JM623369
623369
JM338374
338374
JM330706
330706
JM320786
320786
JM317762
317762
JM317455
317455
JM317489
317489
JM305542
305542
JM303303
303303
JM303292
303292
JM302043
302043
JM578725
578725
JM301211
301211
JM300744
300744
JM300236
300236
JM298689
298689
JM298254
298254
JM297100
297100
JM296572
296572
JM294216
294216
JM294214
294214
JM294035
294035
JM293870
293870
JM292827
292827
JM240961
240961
JM290782
290782
JM290993
290993
JM291030
291030
JM272087
272087
JM289813
289813
JM288705
288705
JM250061
250061
JM287157
287157
JM246718
246718
JM282567
282567
JM282519
282519
JM281966
281966
JM42438
42438
JM279921
279921
JM279638
279638
JM279045
279045
JM278885
278885
JM278536
278536
JM276754
276754
JM273697
273697
JM273696
273696
JM272959
272959
JM272406
272406
JM271673
271673
JM271259
271259
JM272263
272263
JM268695
268695
JM22796
22796
JM269092
269092
JM269645
269645
JM268143
268143
JM560318
560318
JM230400
230400
JM25933
25933
JM11677
11677
JM11674
11674
JM25934
25934
JM31256
31256
JM34917
34917
JM188490
188490
JM188589
188589
JM225603
225603
JM254324
254324
JM256969
256969
JM570833
570833
JM259180
259180
JM261610
261610
JM268139
268139
JM268054
268054
JM267131
267131
JM265516
265516
JM265578
265578
JM265905
265905
JM283429
283429
JM257484
257484
JM559724
559724
JM260833
260833
JM258148
258148
JM257777
257777
JM258411
258411
JM259519
259519
JM257215
257215
JM256598
256598
JM255813
255813
JM255646
255646
JM253602
253602
JM253202
253202
JM249916
249916
JM250205
250205
JM250722
250722
JM250701
250701
JM220259
220259
JM251689
251689
JM249589
249589
JM248873
248873
JM425068
425068
JM303729
303729
JM286037
286037
JM524939
524939
JM616133
616133
JM247352
247352
JM246920
246920
JM247115
247115
JM246919
246919
JM246872
246872
JM246437
246437
JM246554
246554
JM246434
246434
JM246266
246266
JM144446
144446
JM245706
245706
JM245400
245400
JM245146
245146
JM244957
244957
JM244784
244784
JM244654
244654
JM244081
244081
JM243678
243678
JM242743
242743
JM548231
548231
JM241585
241585
JM240816
240816
JM241275
241275
JM240586
240586
JM241924
241924
JM235221
235221
JM234082
234082
JM235177
235177
JM238327
238327
JM238581
238581
JM235200
235200
JM233360
233360
JM233361
233361
JM232646
232646
JM232787
232787
JM232793
232793
JM231680
231680
JM230922
230922
JM230963
230963
JM229849
229849
JM229783
229783
JM229542
229542
JM229567
229567
JM229670
229670
JM228946
228946
JM230562
230562
JM533550
533550
JM618703
618703
JM528362
528362
JM227292
227292
JM227186
227186
JM226886
226886
JM512863
512863
JM225748
225748
JM226970
226970
JM226390
226390
JM224793
224793
JM222871
222871
JM222276
222276
JM222451
222451
JM222463
222463
JM221538
221538
JM222198
222198
JM221461
221461
JM221328
221328
JM97627
97627
JM225349
225349
JM221002
221002
JM220754
220754
JM211595
211595
JM207111
207111
JM220277
220277
JM220276
220276
JM217638
217638
JM218659
218659
JM219423
219423
JM219644
219644
JM217968
217968
JM216462
216462
JM214600
214600
JM215322
215322
JM214818
214818
JM214568
214568
JM214383
214383
JM214356
214356
JM214173
214173
JM214093
214093
JM151707
151707
JM213944
213944
JM212049
212049
JM13826
13826
JM213153
213153
JM213350
213350
JM213165
213165
JM213681
213681
JM213943
213943
JM200595
200595
JM190841
190841
JM211868
211868
JM211913
211913
JM212048
212048
JM400710
400710
JM567744
567744
JM568343
568343
JM565950
565950
JM535652
535652
JM523385
523385
JM372251
372251
JM232630
232630
JM354569
354569
JM267495
267495
JM208770
208770
JM208429
208429
JM208423
208423
JM208038
208038
JM208824
208824
JM208773
208773
JM208717
208717
JM208780
208780
JM209412
209412
JM210154
210154
JM208024
208024
JM208013
208013
JM207321
207321
JM207222
207222
JM207250
207250
JM206541
206541
JM203200
203200
JM206930
206930
JM206926
206926
JM206229
206229
JM185000
185000
JM206028
206028
JM205557
205557
JM205826
205826
JM205684
205684
JM203554
203554
JM202258
202258
JM202028
202028
JM140707
140707
JM202939
202939
JM201947
201947
JM201688
201688
JM201935
201935
JM201161
201161
JM200841
200841
JM200086
200086
JM199580
199580
JM198127
198127
JM198052
198052
JM197837
197837
JM197687
197687
JM197686
197686
JM197396
197396
JM99097
99097
JM83869
83869
JM196934
196934
JM196546
196546
JM196312
196312
JM196311
196311
JM196142
196142
JM196028
196028
JM137538
137538
JM137715
137715
JM83394
83394
JM195887
195887
JM195865
195865
JM195466
195466
JM195133
195133
JM193997
193997
JM193160
193160
JM192960
192960
JM192939
192939
JM192631
192631
JM191853
191853
JM192359
192359
JM191020
191020
JM191782
191782
JM191849
191849
JM190533
190533














































































































































































































































































































































































































































































































































































































































































































































































































































































































































'''

# 单独下载章节
jm_photos = '''



'''


def env(name, default, trim=('[]', '""', "''")):
    import os
    value = os.getenv(name, None)
    if value is None or value == '':
        return default

    for pair in trim:
        if value.startswith(pair[0]) and value.endswith(pair[1]):
            value = value[1:-1]

    return value


def get_id_set(env_name, given):
    aid_set = set()
    for text in [
        given,
        (env(env_name, '')).replace('-', '\n'),
    ]:
        aid_set.update(str_to_set(text))

    return aid_set


def main():
    album_id_set = get_id_set('JM_ALBUM_IDS', jm_albums)
    photo_id_set = get_id_set('JM_PHOTO_IDS', jm_photos)

    helper = JmcomicUI()
    helper.album_id_list = list(album_id_set)
    helper.photo_id_list = list(photo_id_set)

    option = get_option()
    helper.run(option)
    option.call_all_plugin('after_download')


def get_option():
    # 读取 option 配置文件
    option = create_option(os.path.abspath(os.path.join(__file__, '../../assets/option/option_workflow_download.yml')))

    # 支持工作流覆盖配置文件的配置
    cover_option_config(option)

    # 把请求错误的html下载到文件，方便GitHub Actions下载查看日志
    log_before_raise()

    return option


def cover_option_config(option: JmOption):
    dir_rule = env('DIR_RULE', None)
    if dir_rule is not None:
        the_old = option.dir_rule
        the_new = DirRule(dir_rule, base_dir=the_old.base_dir)
        option.dir_rule = the_new

    impl = env('CLIENT_IMPL', None)
    if impl is not None:
        option.client.impl = impl

    suffix = env('IMAGE_SUFFIX', None)
    if suffix is not None:
        option.download.image.suffix = fix_suffix(suffix)


def log_before_raise():
    jm_download_dir = env('JM_DOWNLOAD_DIR', workspace())
    mkdir_if_not_exists(jm_download_dir)

    def decide_filepath(e):
        resp = e.context.get(ExceptionTool.CONTEXT_KEY_RESP, None)

        if resp is None:
            suffix = str(time_stamp())
        else:
            suffix = resp.url

        name = '-'.join(
            fix_windir_name(it)
            for it in [
                e.description,
                current_thread().name,
                suffix
            ]
        )

        path = f'{jm_download_dir}/【出错了】{name}.log'
        return path

    def exception_listener(e: JmcomicException):
        """
        异常监听器，实现了在 GitHub Actions 下，把请求错误的信息下载到文件，方便调试和通知使用者
        """
        # 决定要写入的文件路径
        path = decide_filepath(e)

        # 准备内容
        content = [
            str(type(e)),
            e.msg,
        ]
        for k, v in e.context.items():
            content.append(f'{k}: {v}')

        # resp.text
        resp = e.context.get(ExceptionTool.CONTEXT_KEY_RESP, None)
        if resp:
            content.append(f'响应文本: {resp.text}')

        # 写文件
        write_text(path, '\n'.join(content))

    JmModuleConfig.register_exception_listener(JmcomicException, exception_listener)


if __name__ == '__main__':
    main()
