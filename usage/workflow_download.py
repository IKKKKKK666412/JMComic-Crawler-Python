from jmcomic import *
from jmcomic.cl import JmcomicUI

# 下方填入你要下载的本子的id，一行一个，每行的首尾可以有空白字符
jm_albums = '''




JM29482
29482
JM29174
29174
JM29030
29030
JM29029
29029
JM29172
29172
JM28765
28765
JM28635
28635
JM28443
28443
JM28244
28244
JM28348
28348
JM28199
28199
JM28159
28159
JM28088
28088
JM27926
27926
JM27851
27851
JM27602
27602
JM27264
27264
JM26899
26899
JM26763
26763
JM26306
26306
JM26289
26289
JM26134
26134
JM26175
26175
JM26194
26194
JM26188
26188
JM25942
25942
JM26128
26128
JM26123
26123
JM25933
25933
JM25701
25701
JM25699
25699
JM25647
25647
JM24553
24553
JM24407
24407
JM24383
24383
JM24689
24689
JM24329
24329
JM24243
24243
JM24207
24207
JM24117
24117
JM23870
23870
JM23573
23573
JM23462
23462
JM23097
23097
JM22557
22557
JM22504
22504
JM22341
22341
JM22167
22167
JM22056
22056
JM21800
21800
JM21139
21139
JM21348
21348
JM21747
21747
JM20974
20974
JM20695
20695
JM20600
20600
JM20111
20111
JM20493
20493
JM20101
20101
JM20091
20091
JM20088
20088
JM19905
19905
JM19897
19897
JM19803
19803
JM19783
19783
JM19685
19685
JM19444
19444
JM19496
19496
JM18711
18711
JM18705
18705
JM19366
19366
JM18834
18834
JM18704
18704
JM18458
18458
JM18035
18035
JM17938
17938
JM17869
17869
JM17877
17877
JM17745
17745
JM17639
17639
JM17638
17638
JM17425
17425
JM17356
17356
JM17319
17319
JM17323
17323
JM17274
17274
JM16912
16912
JM16724
16724
JM16498
16498
JM16461
16461
JM16096
16096
JM15802
15802
JM15759
15759
JM15472
15472
JM15046
15046
JM14981
14981
JM14551
14551
JM14613
14613
JM14216
14216
JM14409
14409
JM13990
13990
JM14178
14178
JM13984
13984
JM13890
13890
JM13531
13531
JM13740
13740
JM13821
13821
JM13527
13527
JM13385
13385
JM13772
13772
JM13081
13081
JM12929
12929
JM13361
13361
JM12737
12737
JM12659
12659
JM12572
12572
JM12438
12438
JM12493
12493
JM12125
12125
JM12307
12307
JM12258
12258
JM11694
11694
JM11475
11475
JM11131
11131
JM11251
11251
JM11290
11290
JM11086
11086
JM11123
11123
JM10496
10496
JM10712
10712
JM9832
9832
JM9736
9736
JM9931
9931
JM10038
10038
JM10292
10292
JM9686
9686
JM9233
9233
JM9131
9131
JM8830
8830
JM8798
8798
JM8956
8956
JM8982
8982
JM8971
8971
JM9016
9016
JM8985
8985
JM8512
8512
JM8442
8442
JM8417
8417
JM8409
8409
JM8671
8671
JM8022
8022
JM7991
7991
JM7819
7819
JM7144
7144
JM6860
6860
JM6762
6762
JM6761
6761
JM6562
6562
JM6664
6664
JM5770
5770
JM5731
5731
JM5671
5671
JM5203
5203
JM5335
5335
JM4744
4744
JM4931
4931
JM5326
5326
JM4356
4356
JM4345
4345
JM4355
4355
JM3844
3844
JM4134
4134
JM3078
3078
JM3470
3470
JM3790
3790
JM3841
3841
JM3025
3025
JM2738
2738
JM2568
2568
JM2537
2537
JM1595
1595
JM1469
1469
JM1451
1451
JM1444
1444
JM1397
1397
JM1387
1387
JM1276
1276
JM1050
1050
JM1292
1292
JM1356
1356
JM943
943
JM750
750
JM115
115
JM1403
1403
JM623213
623213
JM147172
147172
JM212997
212997
JM268320
268320
JM408166
408166
JM565613
565613
JM423368
423368
JM309840
309840
JM438246
438246
JM450025
450025
JM438249
438249
JM502338
502338
JM495947
495947
JM618618
618618
JM475217
475217
JM468585
468585
JM397303
397303
JM313481
313481
JM248171
248171
JM616282
616282
JM613946
613946
JM619524
619524
JM606474
606474
JM601720
601720
JM599506
599506
JM595486
595486
JM596957
596957
JM617010
617010
JM495247
495247
JM589023
589023
JM441194
441194
JM467250
467250
JM589021
589021
JM557536
557536
JM509140
509140
JM570484
570484
JM570235
570235
JM569236
569236
JM569063
569063
JM568724
568724
JM567836
567836
JM567595
567595
JM527774
527774
JM388439
388439
JM346445
346445
JM564269
564269
JM553609
553609
JM553386
553386
JM553414
553414
JM555108
555108
JM555288
555288
JM556536
556536
JM557995
557995
JM560775
560775
JM563774
563774
JM564312
564312
JM555322
555322
JM555265
555265
JM552263
552263
JM544683
544683
JM545513
545513
JM547685
547685
JM383382
383382
JM400753
400753
JM439853
439853
JM552247
552247
JM382415
382415
JM344587
344587
JM279993
279993
JM477926
477926
JM368815
368815
JM561916
561916
JM536384
536384
JM550442
550442
JM537006
537006
JM539280
539280
JM541952
541952
JM543118
543118
JM542681
542681
JM481730
481730
JM542656
542656
JM543314
543314
JM308588
308588
JM423512
423512
JM459038
459038
JM536852
536852
JM536241
536241
JM535636
535636
JM178004
178004
JM210264
210264
JM316622
316622
JM414432
414432
JM505984
505984
JM546297
546297
JM535012
535012
JM535283
535283
JM534050
534050
JM403865
403865
JM400977
400977
JM502342
502342
JM551503
551503
JM531642
531642
JM531329
531329
JM530561
530561
JM569586
569586
JM346703
346703
JM466172
466172
JM557752
557752
JM270626
270626
JM520705
520705
JM419411
419411
JM530548
530548
JM530475
530475
JM401485
401485
JM373206
373206
JM11477
11477
JM487339
487339
JM523565
523565
JM467023
467023
JM445839
445839
JM524983
524983
JM485733
485733
JM456136
456136
JM413539
413539
JM383981
383981
JM374576
374576
JM274631
274631
JM510129
510129
JM561118
561118
JM206963
206963
JM222322
222322
JM518078
518078
JM519006
519006
JM471426
471426
JM351634
351634
JM183238
183238
JM101188
101188
JM86287
86287
JM461364
461364
JM513534
513534
JM511557
511557
JM511165
511165
JM582599
582599
JM510833
510833
JM510537
510537
JM509705
509705
JM509445
509445
JM230088
230088
JM366437
366437
JM330677
330677
JM509315
509315
JM219641
219641
JM509680
509680
JM508670
508670
JM403310
403310
JM348313
348313
JM104042
104042
JM215543
215543
JM252538
252538
JM64760
64760
JM2936
2936
JM5730
5730
JM20940
20940
JM251024
251024
JM339690
339690
JM508572
508572
JM507056
507056
JM506577
506577
JM505929
505929
JM499842
499842
JM500889
500889
JM500308
500308
JM6867
6867
JM512113
512113
JM146890
146890
JM376629
376629
JM421457
421457
JM260980
260980
JM500228
500228
JM499539
499539
JM498416
498416
JM498425
498425
JM498109
498109
JM483007
483007
JM496895
496895
JM496446
496446
JM495889
495889
JM495321
495321
JM494690
494690
JM494667
494667
JM494741
494741
JM494190
494190
JM494665
494665
JM494200
494200
JM493607
493607
JM487873
487873
JM479025
479025
JM486064
486064
JM486259
486259
JM474431
474431
JM486188
486188
JM485740
485740
JM485777
485777
JM485384
485384
JM485515
485515
JM484676
484676
JM177667
177667
JM178470
178470
JM245703
245703
JM433907
433907
JM571148
571148
JM252908
252908
JM354363
354363
JM567941
567941
JM570831
570831
JM253246
253246
JM483064
483064
JM235576
235576
JM114331
114331
JM241205
241205
JM402702
402702
JM285209
285209
JM296688
296688
JM400742
400742
JM4158
4158
JM151790
151790
JM151966
151966
JM367698
367698
JM369748
369748
JM407103
407103
JM476065
476065
JM479938
479938
JM529623
529623
JM550182
550182
JM482728
482728
JM481999
481999
JM481755
481755
JM481471
481471
JM481168
481168
JM481189
481189
JM481144
481144
JM550197
550197
JM480581
480581
JM478012
478012
JM478482
478482
JM481044
481044
JM434855
434855
JM342926
342926
JM331181
331181
JM479484
479484
JM475377
475377
JM242507
242507
JM570722
570722
JM214401
214401
JM477982
477982
JM477927
477927
JM477842
477842
JM477834
477834
JM477700
477700
JM474867
474867
JM473970
473970
JM473768
473768
JM472964
472964
JM472951
472951
JM473702
473702
JM472557
472557
JM472247
472247
JM471541
471541
JM469530
469530
JM470692
470692
JM469743
469743
JM469766
469766
JM469955
469955
JM467513
467513
JM467521
467521
JM465585
465585
JM409512
409512
JM541283
541283
JM408089
408089
JM275637
275637
JM330660
330660
JM268311
268311
JM380058
380058
JM458828
458828
JM464552
464552
JM505234
505234
JM391874
391874
JM368836
368836
JM616979
616979


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































'''

# 单独下载章节
jm_photos = '''



'''


def env(name, default, trim=('[]', '""', "''")):
    import os
    value = os.getenv(name, None)
    if value is None or value == '':
        return default

    for pair in trim:
        if value.startswith(pair[0]) and value.endswith(pair[1]):
            value = value[1:-1]

    return value


def get_id_set(env_name, given):
    aid_set = set()
    for text in [
        given,
        (env(env_name, '')).replace('-', '\n'),
    ]:
        aid_set.update(str_to_set(text))

    return aid_set


def main():
    album_id_set = get_id_set('JM_ALBUM_IDS', jm_albums)
    photo_id_set = get_id_set('JM_PHOTO_IDS', jm_photos)

    helper = JmcomicUI()
    helper.album_id_list = list(album_id_set)
    helper.photo_id_list = list(photo_id_set)

    option = get_option()
    helper.run(option)
    option.call_all_plugin('after_download')


def get_option():
    # 读取 option 配置文件
    option = create_option(os.path.abspath(os.path.join(__file__, '../../assets/option/option_workflow_download.yml')))

    # 支持工作流覆盖配置文件的配置
    cover_option_config(option)

    # 把请求错误的html下载到文件，方便GitHub Actions下载查看日志
    log_before_raise()

    return option


def cover_option_config(option: JmOption):
    dir_rule = env('DIR_RULE', None)
    if dir_rule is not None:
        the_old = option.dir_rule
        the_new = DirRule(dir_rule, base_dir=the_old.base_dir)
        option.dir_rule = the_new

    impl = env('CLIENT_IMPL', None)
    if impl is not None:
        option.client.impl = impl

    suffix = env('IMAGE_SUFFIX', None)
    if suffix is not None:
        option.download.image.suffix = fix_suffix(suffix)


def log_before_raise():
    jm_download_dir = env('JM_DOWNLOAD_DIR', workspace())
    mkdir_if_not_exists(jm_download_dir)

    def decide_filepath(e):
        resp = e.context.get(ExceptionTool.CONTEXT_KEY_RESP, None)

        if resp is None:
            suffix = str(time_stamp())
        else:
            suffix = resp.url

        name = '-'.join(
            fix_windir_name(it)
            for it in [
                e.description,
                current_thread().name,
                suffix
            ]
        )

        path = f'{jm_download_dir}/【出错了】{name}.log'
        return path

    def exception_listener(e: JmcomicException):
        """
        异常监听器，实现了在 GitHub Actions 下，把请求错误的信息下载到文件，方便调试和通知使用者
        """
        # 决定要写入的文件路径
        path = decide_filepath(e)

        # 准备内容
        content = [
            str(type(e)),
            e.msg,
        ]
        for k, v in e.context.items():
            content.append(f'{k}: {v}')

        # resp.text
        resp = e.context.get(ExceptionTool.CONTEXT_KEY_RESP, None)
        if resp:
            content.append(f'响应文本: {resp.text}')

        # 写文件
        write_text(path, '\n'.join(content))

    JmModuleConfig.register_exception_listener(JmcomicException, exception_listener)


if __name__ == '__main__':
    main()
