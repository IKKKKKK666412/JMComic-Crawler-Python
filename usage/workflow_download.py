from jmcomic import *
from jmcomic.cl import JmcomicUI

# 下方填入你要下载的本子的id，一行一个，每行的首尾可以有空白字符
jm_albums = '''
JM141192
141192
JM140985
140985
JM140456
140456
JM139957
139957
JM139959
139959
JM140126
140126
JM139786
139786
JM139675
139675
JM139528
139528
JM139515
139515
JM139052
139052
JM139027
139027
JM138847
138847
JM138497
138497
JM138451
138451
JM137931
137931
JM137929
137929
JM138148
138148
JM137764
137764
JM137277
137277
JM137268
137268
JM137185
137185
JM137179
137179
JM137076
137076
JM137037
137037
JM136915
136915
JM136735
136735
JM136472
136472
JM136427
136427
JM136419
136419
JM136208
136208
JM135980
135980
JM135934
135934
JM135873
135873
JM135644
135644
JM135643
135643
JM135104
135104
JM134993
134993
JM133058
133058
JM133040
133040
JM132054
132054
JM131651
131651
JM130063
130063
JM129971
129971
JM129958
129958
JM129864
129864
JM125841
125841
JM125682
125682
JM125665
125665
JM124568
124568
JM125555
125555
JM124078
124078
JM124270
124270
JM124412
124412
JM123243
123243
JM122744
122744
JM122511
122511
JM122162
122162
JM122538
122538
JM122111
122111
JM122066
122066
JM122052
122052
JM121889
121889
JM121887
121887
JM121836
121836
JM121718
121718
JM121512
121512
JM121120
121120
JM120941
120941
JM120773
120773
JM121004
121004
JM118611
118611
JM118564
118564
JM118225
118225
JM116253
116253
JM117024
117024
JM117064
117064
JM113763
113763
JM114331
114331
JM114098
114098
JM113358
113358
JM112976
112976
JM112789
112789
JM113012
113012
JM113576
113576
JM113713
113713
JM110572
110572
JM110557
110557
JM106015
106015
JM105896
105896
JM105651
105651
JM105580
105580
JM105362
105362
JM105093
105093
JM105336
105336
JM104962
104962
JM104639
104639
JM104801
104801
JM104674
104674
JM104437
104437
JM104340
104340
JM104110
104110
JM104131
104131
JM103911
103911
JM103677
103677
JM101432
101432
JM104087
104087
JM620242
620242
JM103157
103157
JM102918
102918
JM103212
103212
JM101894
101894
JM101773
101773
JM101657
101657
JM101623
101623
JM102294
102294
JM101611
101611
JM101597
101597
JM101563
101563
JM101295
101295
JM100452
100452
JM100238
100238
JM100235
100235
JM99734
99734
JM99706
99706
JM99443
99443
JM99195
99195
JM98875
98875
JM98866
98866
JM99108
99108
JM99005
99005
JM99003
99003
JM97441
97441
JM97844
97844
JM97102
97102
JM96914
96914
JM96886
96886
JM96745
96745
JM96302
96302
JM96394
96394
JM96261
96261
JM96230
96230
JM96056
96056
JM95969
95969
JM95962
95962
JM95605
95605
JM95603
95603
JM95601
95601
JM95599
95599
JM95597
95597
JM95596
95596
JM95595
95595
JM95591
95591
JM95452
95452
JM95144
95144
JM95045
95045
JM95033
95033
JM93587
93587
JM93350
93350
JM92860
92860
JM93675
93675
JM93667
93667
JM92358
92358
JM92340
92340
JM91882
91882
JM92042
92042
JM92114
92114
JM91170
91170
JM91154
91154
JM90458
90458
JM90285
90285
JM90284
90284
JM90017
90017
JM88991
88991
JM89913
89913
JM88345
88345
JM86453
86453
JM87046
87046
JM87740
87740
JM85821
85821
JM85790
85790
JM85787
85787
JM85294
85294
JM84945
84945
JM84684
84684
JM84171
84171
JM84600
84600
JM83863
83863
JM83751
83751
JM83597
83597
JM83578
83578
JM93669
93669
JM83471
83471
JM83269
83269
JM82805
82805
JM82232
82232
JM82635
82635
JM82286
82286
JM81723
81723
JM81587
81587
JM81505
81505
JM80435
80435
JM80436
80436
JM80343
80343
JM80322
80322
JM80222
80222
JM80201
80201
JM80170
80170
JM80167
80167
JM80166
80166
JM80165
80165
JM79993
79993
JM79849
79849
JM79620
79620
JM79617
79617
JM78746
78746
JM78971
78971
JM78449
78449
JM78744
78744
JM78312
78312
JM78413
78413
JM78005
78005
JM77751
77751
JM77691
77691
JM77462
77462
JM76940
76940
JM77112
77112
JM76942
76942
JM76388
76388
JM75787
75787
JM75957
75957
JM75781
75781
JM75454
75454
JM74021
74021
JM73948
73948
JM73507
73507
JM74463
74463
JM74469
74469
JM73146
73146
JM72781
72781
JM72047
72047
JM70272
70272
JM70687
70687
JM71806
71806
JM70216
70216
JM70079
70079
JM70034
70034
JM69420
69420
JM68297
68297
JM569433
569433
JM68969
68969
JM67058
67058
JM66578
66578
JM62738
62738
JM62439
62439
JM62064
62064
JM61829
61829
JM61038
61038
JM60449
60449
JM60004
60004
JM59901
59901
JM59721
59721
JM59677
59677
JM59658
59658
JM57457
57457
JM56989
56989
JM56735
56735
JM54757
54757
JM55540
55540
JM51674
51674
JM50980
50980
JM52557
52557
JM52134
52134
JM50359
50359
JM50061
50061
JM50406
50406
JM49842
49842
JM49511
49511
JM49948
49948
JM49445
49445
JM49334
49334
JM49321
49321
JM49182
49182
JM49001
49001
JM48787
48787
JM47022
47022
JM48398
48398
JM47088
47088
JM48450
48450
JM46747
46747
JM46722
46722
JM46723
46723
JM46603
46603
JM46655
46655
JM46589
46589
JM46371
46371
JM46304
46304
JM46301
46301
JM46104
46104
JM46102
46102
JM46098
46098
JM45530
45530
JM45500
45500
JM45377
45377
JM45354
45354
JM45352
45352
JM44576
44576
JM44712
44712
JM44636
44636
JM43732
43732
JM43560
43560
JM42956
42956
JM42691
42691
JM43202
43202
JM43448
43448
JM41896
41896
JM41841
41841
JM41665
41665
JM41623
41623
JM41563
41563
JM41525
41525
JM41486
41486
JM41520
41520
JM41322
41322
JM41248
41248
JM40876
40876
JM40714
40714
JM40595
40595
JM40613
40613
JM40496
40496
JM40501
40501
JM40495
40495
JM40372
40372
JM40130
40130
JM40097
40097
JM39911
39911
JM39583
39583
JM39655
39655
JM39611
39611
JM39347
39347
JM39428
39428
JM39536
39536
JM39548
39548
JM39426
39426
JM38960
38960
JM39322
39322
JM38411
38411
JM38660
38660
JM38012
38012
JM37847
37847
JM38213
38213
JM38134
38134
JM37765
37765
JM37604
37604
JM37588
37588
JM37377
37377
JM37486
37486
JM37438
37438
JM37373
37373
JM36868
36868
JM36209
36209
JM36502
36502
JM35950
35950
JM35731
35731
JM35691
35691
JM35649
35649
JM35436
35436
JM35585
35585
JM35591
35591
JM35587
35587
JM35580
35580
JM35268
35268
JM35393
35393
JM35428
35428
JM35242
35242
JM35238
35238
JM34359
34359
JM34791
34791
JM34901
34901
JM34616
34616
JM34788
34788
JM34786
34786
JM34121
34121
JM34090
34090
JM33862
33862
JM33761
33761
JM33759
33759
JM33357
33357
JM33754
33754
JM33695
33695
JM33355
33355
JM33350
33350
JM33313
33313
JM33169
33169
JM33171
33171
JM32912
32912
JM32896
32896
JM32874
32874
JM32499
32499
JM32576
32576
JM32863
32863
JM32370
32370
JM32288
32288
JM32210
32210
JM32188
32188
JM32033
32033
JM32011
32011
JM31992
31992
JM31211
31211
JM30972
30972
JM30902
30902
JM30759
30759
JM30393
30393
JM30429
30429
JM30728
30728
JM30581
30581
JM30242
30242
JM30389
30389
JM30219
30219
JM29762
29762
JM30178
30178
JM29734
29734
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































'''

# 单独下载章节
jm_photos = '''



'''


def env(name, default, trim=('[]', '""', "''")):
    import os
    value = os.getenv(name, None)
    if value is None or value == '':
        return default

    for pair in trim:
        if value.startswith(pair[0]) and value.endswith(pair[1]):
            value = value[1:-1]

    return value


def get_id_set(env_name, given):
    aid_set = set()
    for text in [
        given,
        (env(env_name, '')).replace('-', '\n'),
    ]:
        aid_set.update(str_to_set(text))

    return aid_set


def main():
    album_id_set = get_id_set('JM_ALBUM_IDS', jm_albums)
    photo_id_set = get_id_set('JM_PHOTO_IDS', jm_photos)

    helper = JmcomicUI()
    helper.album_id_list = list(album_id_set)
    helper.photo_id_list = list(photo_id_set)

    option = get_option()
    helper.run(option)
    option.call_all_plugin('after_download')


def get_option():
    # 读取 option 配置文件
    option = create_option(os.path.abspath(os.path.join(__file__, '../../assets/option/option_workflow_download.yml')))

    # 支持工作流覆盖配置文件的配置
    cover_option_config(option)

    # 把请求错误的html下载到文件，方便GitHub Actions下载查看日志
    log_before_raise()

    return option


def cover_option_config(option: JmOption):
    dir_rule = env('DIR_RULE', None)
    if dir_rule is not None:
        the_old = option.dir_rule
        the_new = DirRule(dir_rule, base_dir=the_old.base_dir)
        option.dir_rule = the_new

    impl = env('CLIENT_IMPL', None)
    if impl is not None:
        option.client.impl = impl

    suffix = env('IMAGE_SUFFIX', None)
    if suffix is not None:
        option.download.image.suffix = fix_suffix(suffix)


def log_before_raise():
    jm_download_dir = env('JM_DOWNLOAD_DIR', workspace())
    mkdir_if_not_exists(jm_download_dir)

    def decide_filepath(e):
        resp = e.context.get(ExceptionTool.CONTEXT_KEY_RESP, None)

        if resp is None:
            suffix = str(time_stamp())
        else:
            suffix = resp.url

        name = '-'.join(
            fix_windir_name(it)
            for it in [
                e.description,
                current_thread().name,
                suffix
            ]
        )

        path = f'{jm_download_dir}/【出错了】{name}.log'
        return path

    def exception_listener(e: JmcomicException):
        """
        异常监听器，实现了在 GitHub Actions 下，把请求错误的信息下载到文件，方便调试和通知使用者
        """
        # 决定要写入的文件路径
        path = decide_filepath(e)

        # 准备内容
        content = [
            str(type(e)),
            e.msg,
        ]
        for k, v in e.context.items():
            content.append(f'{k}: {v}')

        # resp.text
        resp = e.context.get(ExceptionTool.CONTEXT_KEY_RESP, None)
        if resp:
            content.append(f'响应文本: {resp.text}')

        # 写文件
        write_text(path, '\n'.join(content))

    JmModuleConfig.register_exception_listener(JmcomicException, exception_listener)


if __name__ == '__main__':
    main()
